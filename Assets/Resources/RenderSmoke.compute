#pragma kernel CS_RayMarchSmoke

#include "UnityCG.cginc"
#include "UnityStandardBRDF.cginc"

#define STEPS 256
#define MIN_HIT_DISTANCE 0.001
#define MAX_DISTANCE 1000

RWTexture2D<float4> _SmokeTex;
RWTexture2D<float> _SmokeDepthTex;
RWTexture2D<half> _SmokeMaskTex;

float3 _CameraWorldPos;
float3 _SunDirection;
float4x4 _CameraToWorld;
float4x4 _CameraInvProjection;
float4x4 _CameraViewProjection;
float _BufferWidth;
float _BufferHeight;

float _Radius;
float4 _CubeParams;

float GetSphereDist(float3 pos) {
    return length(pos - 0) - _Radius;
}

float GetCubeDist(float3 pos) {
    float3 q = abs(pos - _CubeParams.xyz) - _CubeParams.w;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float GetDist(float3 pos) {
    return max(GetSphereDist(pos), -GetCubeDist(pos));
}

float RaymarchObstacles(float3 rayOrigin, float3 rayDir) {
    float distance = 0.0f;

    for (int i = 0; i < STEPS && distance < MAX_DISTANCE; ++i) {
        float3 pos = rayOrigin + distance * rayDir;
        float distanceToObject = GetCubeDist(pos);
        if (distanceToObject < MIN_HIT_DISTANCE) return distance;
        distance += distanceToObject;
    }

    return MAX_DISTANCE;
}

float4 RaymarchSmokeMesh(float3 rayOrigin, float3 rayDir) {
    float distance = 0.0f;

    for (int i = 0; i < STEPS && distance < MAX_DISTANCE; ++i) {
        float3 pos = rayOrigin + distance * rayDir;

        float distanceToObject = GetSphereDist(pos);

        if (distanceToObject < MIN_HIT_DISTANCE) {
            if (RaymarchObstacles(pos, 0 - pos) < MAX_DISTANCE) return MAX_DISTANCE;
            
            return float4(pos, distance);
        }
        distance += distanceToObject;
    }

    return MAX_DISTANCE;
}

float3 CalcNormal(float3 p) {
    float2 e = float2(0.001, 0);
    float3 n = GetSphereDist(p) - float3(
        GetSphereDist(p - e.xyy), 
        GetSphereDist(p - e.yxy), 
        GetSphereDist(p - e.yyx)
    );

    return normalize(n);
}

[numthreads(8,8,1)]
void CS_RayMarchSmoke (uint3 id : SV_DispatchThreadID) {
    float3 origin = _CameraWorldPos;

    float2 uv = (id.xy / float2(_BufferWidth, _BufferHeight)) * 2 - 1;
    float3 direction = mul(_CameraInvProjection, float4(uv, 1.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    float4 hitPos = RaymarchSmokeMesh(origin, direction);

    float4 col = 0.0f;
    if (hitPos.w < MAX_DISTANCE) {
        float3 n = -CalcNormal(hitPos.xyz);

        float ndotl = DotClamped(_SunDirection, n) * 0.5f + 0.5f;
        ndotl *= ndotl;

        col.rgb = ndotl;
    }

    //_SmokeTex[id.xy] = float4(uv, 0, 0);
    _SmokeTex[id.xy] = col;
    _SmokeMaskTex[id.xy] = hitPos.w < MAX_DISTANCE ? 1.0f : 0.0f;

    float4 clipPos = mul(_CameraViewProjection, float4(hitPos.xyz, 1.0f));

    _SmokeDepthTex[id.xy] = clipPos.z / clipPos.w;
}
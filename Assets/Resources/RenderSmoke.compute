#pragma kernel CS_GenerateNoise
#pragma kernel CS_DebugNoise
#pragma kernel CS_RayMarchSmoke

#include "UnityCG.cginc"
#include "UnityStandardBRDF.cginc"
#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise3D.hlsl"

#define STEPS 256
#define MIN_HIT_DISTANCE 0.001
#define MAX_DISTANCE 1000
#define PI 3.1415926538

RWTexture3D<half> _RWNoiseTex;
Texture3D<half> _NoiseTex;
SamplerState linear_repeat_sampler;

RWTexture2D<float4> _SmokeTex;
RWTexture2D<float> _SmokeDepthTex;
RWTexture2D<half> _SmokeMaskTex;

Texture2D<half> _DepthTex;

float3 _CameraWorldPos;
float3 _LightColor;
float3 _SunDirection;
float4x4 _CameraToWorld;
float4x4 _CameraInvProjection;
float4x4 _CameraViewProjection;
float4x4 _CameraInvViewProjection;
float _BufferWidth;
float _BufferHeight;
float _FrameTime;

uint _Shape;
float _Radius;
float4 _CubeParams;

int _StepCount;
int _LightStepCount;
float _SmokeSize;
float _VolumeDensity, _ShadowDensity, _AmbientDensity;
float _AbsorptionCoefficient, _ScatteringCoefficient;
float3 _SmokeColor, _ExtinctionColor, _AmbientColor;
float _G;
float _Jitter;
int _PhaseFunction;

float3 _AnimationDirection;

float3 _NoiseRes;
int _Octaves;
float _Persistance, _Amplitude, _Warp, _Add;
int _CellSize, _Roughness, _Period, _Frequency, _AbsMode, _ClampNoise;

[numthreads(8,8,8)]
void CS_GenerateNoise(uint3 id : SV_DISPATCHTHREADID) {
    //Convert to UV
    float3 pos = float3(id.xyz) / _NoiseRes;
    pos *= _CellSize;

    float n = 0.0f;

    float G = exp2(-_Persistance);
    float f = rcp(exp2(_Frequency));
    float a = _Amplitude;

    for (int i = 0; i < _Octaves; ++i) {
        float noise = PeriodicNoise(pos.xyz * f + i * _Warp, _Period * f);
        noise = (_AbsMode == 1) ? abs(noise) : noise;
        n += a * noise;
        f *= _Roughness;
        a *= G;
    }

    n += _Add;
    n = _AbsMode == 2 ? abs(n) : n;

    _RWNoiseTex[id.xyz] = _ClampNoise ? 1 - saturate(n) : max(0, n);
}

uint _DebugNoiseSlice;
uint _DebugAxis;
uint _DebugTiledNoise;

float RaymarchNoisePlane(float3 rayOrigin, float3 rayDir) {
    float distance = 0.0f;

    float3 n = 0;
    if (_DebugAxis == 0) n.x = 1;
    if (_DebugAxis == 1) n.y = 1;
    if (_DebugAxis == 2) n.z = 1;

    for (int i = 0; i < STEPS && distance < MAX_DISTANCE; ++i) {
        float3 pos = rayOrigin + distance * rayDir;     
        float distanceToObject = max(dot(pos, -n), dot(pos, n));
        distance += distanceToObject;

        if (distanceToObject < MIN_HIT_DISTANCE) return distance;
    }

    return MAX_DISTANCE;
}

[numthreads(8,8,1)]
void CS_DebugNoise(uint3 id : SV_DISPATCHTHREADID) {
    float3 origin = _CameraWorldPos;

    float2 uv = (id.xy / float2(_BufferWidth, _BufferHeight)) * 2 - 1;
    float3 direction = mul(_CameraInvProjection, float4(uv, 1.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    float d = RaymarchNoisePlane(origin, direction);

    float4 col = 0.0f;
    if (d < MAX_DISTANCE) {
        float3 pos = origin + direction * d;

        if ((all(pos > -1) && all(pos < 1)) || _DebugTiledNoise) {
            pos /= _CellSize;
            if (_DebugAxis == 0) pos.x = (_DebugNoiseSlice - 1) / _NoiseRes.x;
            if (_DebugAxis == 1) pos.y = (_DebugNoiseSlice - 1) / _NoiseRes.y;
            if (_DebugAxis == 2) pos.z = (_DebugNoiseSlice - 1) / _NoiseRes.z;

            col.rgb = _NoiseTex.SampleLevel(linear_repeat_sampler, pos, 0).r;
        }
    }

    _SmokeTex[id.xy] = col;
}

float hash(uint n) {
    // integer hash copied from Hugo Elias
	n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

bool solveQuadratic(float a, float b, float c, inout float t0, inout float t1) {
    float discr = b * b - 4.0f * a * c;
    if (discr < 0) return false;
    else if (discr == 0) t0 = t1 = -0.5f * b / a;
    else {
        float q = (b > 0) ? -0.5f * (b + sqrt(discr)) : -0.5f * (b - sqrt(discr));

        t0 = q / a;
        t1 = c / q;
    }

    if (t0 > t1) {
        float temp = t0;
        t0 = t1;
        t1 = temp;
    }

    return true;
}

float3 GetSphereHit(float3 rayOrigin, float3 rayDir) {
    float3 center = _CubeParams.xyz;
    float3 L = rayOrigin - center;

    float a = 1;
    float b = 2 * dot(L, rayDir);
    float c = dot(L, L) - _Radius * _Radius;

    float t0, t1;
    if (!solveQuadratic(a, b, c, t0, t1)) return 0;

    return float3(t0, t1, 1);
}

float3 GetCubeHit(float3 rayOrigin, float3 rayDir) {
    float3 minB = _CubeParams.xyz - _CubeParams.w;
    float3 maxB = _CubeParams.xyz + _CubeParams.w;
    float tmin = (minB.x - rayOrigin.x) / rayDir.x; 
    float tmax = (maxB.x - rayOrigin.x) / rayDir.x; 
 
    if (tmin > tmax) {
        float temp = tmin;
        tmin = tmax;
        tmax = temp;
    }
 
    float tymin = (minB.y - rayOrigin.y) / rayDir.y; 
    float tymax = (maxB.y - rayOrigin.y) / rayDir.y; 
 
    if (tymin > tymax) {
        float temp = tymin;
        tymin = tymax;
        tymax = temp;
    } 
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return 0; 
 
    if (tymin > tmin) 
        tmin = tymin; 
 
    if (tymax < tmax) 
        tmax = tymax; 
 
    float tzmin = (minB.z - rayOrigin.z) / rayDir.z; 
    float tzmax = (maxB.z - rayOrigin.z) / rayDir.z; 
 
    if (tzmin > tzmax) {
        float temp = tzmin;
        tzmin = tzmax;
        tzmax = temp;
    }
 
    if ((tmin > tzmax) || (tzmin > tmax)) 
        return 0; 
 
    if (tzmin > tmin) 
        tmin = tzmin; 
 
    if (tzmax < tmax) 
        tmax = tzmax; 
 
    return float3(tmin, tmax, 1); 
}

float3 RaycastSmokeMesh(float3 rayOrigin, float3 rayDir) {
    float3 hit = 0;

    if (_Shape == 0) hit = GetSphereHit(rayOrigin, rayDir);
    if (_Shape == 1) hit = GetCubeHit(rayOrigin, rayDir);

    return hit;
}

float3 ComputeWorldSpacePosition(float2 positionNDC, float deviceDepth) {
    float4 positionCS = float4(positionNDC * 2.0 - 1.0, deviceDepth, 1.0);
    float4 hpositionWS = mul(_CameraInvViewProjection, positionCS);
    return hpositionWS.xyz / hpositionWS.w;
}

float HenyeyGreenstein(float g, float cos_theta) {
    float denom = 1.0f + g * g - 2.0f * g * cos_theta;
    return (1.0f / (4.0f * PI)) * ((1.0f - g * g) / (denom * sqrt(denom)));
}

float Mie(float g, float cos_theta) {
    float denom = 1.0f + g * g - 2.0f * g * cos_theta;
    return (3.0f / (8.0f * PI)) * (((1 - g * g) * (1 + cos_theta * cos_theta)) / ((2.0f + g * g) * (denom * sqrt(denom)))); 
}

float Rayleigh(float cos_theta) {
    return (3.0f / (16.0f * PI)) * (1 + cos_theta * cos_theta);
}

float phase(float g, float cos_theta) {
    float p = 0.0f;

    if (_PhaseFunction == 0) p = HenyeyGreenstein(g, cos_theta);
    if (_PhaseFunction == 1) p = Mie(g, cos_theta);
    if (_PhaseFunction == 2) p = Rayleigh(cos_theta);

    return p;
}

float getDensity(float3 pos) {
    float3 uvw = pos / _SmokeSize;
    uvw += _AnimationDirection * _FrameTime;
    return (_NoiseTex.SampleLevel(linear_repeat_sampler, uvw, 0).r);
}

[numthreads(8,8,1)]
void CS_RayMarchSmoke (uint3 id : SV_DispatchThreadID) {
    float2 uv = id.xy / float2(_BufferWidth, _BufferHeight);
    uint seed = id.x + _BufferWidth * id.y + _BufferWidth * _BufferHeight;
    float sceneDepth = _DepthTex.SampleLevel(linear_repeat_sampler, uv, 0).r;

    float3 sceneWorldPos = ComputeWorldSpacePosition(uv, sceneDepth);

    // Create camera ray
    float3 origin = _CameraWorldPos;
    float3 rayDir = mul(_CameraInvProjection, float4(uv * 2 - 1, 0.0f, 1.0f)).xyz;
    rayDir = mul(_CameraToWorld, float4(rayDir, 0.0f)).xyz;
    rayDir = normalize(rayDir);

    // Intersect with smoke mesh
    float3 hit = RaycastSmokeMesh(origin, rayDir);
    float3 hitPos = origin + hit.x * rayDir;

    float3 col = 0.0f;
    float alpha = 1.0f;

    // Solve for t in: P = O + tD
    float sceneIntersectDistance = -((origin - sceneWorldPos) / rayDir).x;

    [branch]
    if (hit.z && (hit.x < sceneIntersectDistance) && hit.x > 0) {
        float t1 = hit.x;
        float t2 = min(hit.y, sceneIntersectDistance);

        col = _SmokeColor;
        float extinctionCoefficient = _AbsorptionCoefficient + _ScatteringCoefficient;

        float cos_theta = dot(rayDir, -_SunDirection);
        float p = phase(_G, cos_theta);

        float stepSize = (t2 - t1) / (float)_StepCount;
        float baseDensity = _VolumeDensity * stepSize;

        [loop]
        for (int i = 0; i < _StepCount; ++i) {
            float t = t1 + stepSize * i;

            float3 samplePos = origin + t * rayDir;
            float sampleDensity = getDensity(samplePos);
            alpha *= exp(-baseDensity * sampleDensity * extinctionCoefficient);

            float3 lightHit = RaycastSmokeMesh(samplePos, -_SunDirection);

            [branch]
            if (lightHit.z && lightHit.x <= 0 && sampleDensity > 0.001) {
                float lStepSize = lightHit.y / (float)_LightStepCount;
                float shadowDensity = _ShadowDensity * lStepSize;

                float tau = 0.0f;

                [loop]
                for (int j = 0; j < _LightStepCount; ++j) {
                    float tl = lStepSize * j;
                    float3 lSamplePos = samplePos - tl * _SunDirection;
                    tau += getDensity(lSamplePos);
                }

                float3 lightAttenuation = exp(-(tau / _ExtinctionColor) * extinctionCoefficient * shadowDensity);
                col += _LightColor * lightAttenuation * alpha * p * _ScatteringCoefficient * baseDensity * sampleDensity;

                //Compute AO
                float aoTerm = getDensity(samplePos + float3(0.0f, 0.05f, 0.0f));
                aoTerm += getDensity(samplePos + float3(0.0f, 0.1f, 0.0f));
                aoTerm += getDensity(samplePos + float3(0.0f, 0.2f, 0.0f));

                col += _AmbientColor * exp(-(aoTerm / _ExtinctionColor) * _AmbientDensity * extinctionCoefficient * 0.1f) * alpha * Rayleigh(cos_theta) * _ScatteringCoefficient * baseDensity * sampleDensity;
            }
        }

        // Compute Ambient Occlusion
        //float shadow = getDensity();

    }

    //_SmokeTex[id.xy] = (smokeIntersectDistance < sceneIntersectDistance);
    _SmokeTex[id.xy] = float4(saturate(col), 1.0f);
    _SmokeMaskTex[id.xy] = saturate(alpha);

    // Calculate clip depth
    float4 clipPos = mul(_CameraViewProjection, float4(hitPos.xyz, 1.0f));
    _SmokeDepthTex[id.xy] = clipPos.z / clipPos.w;
}
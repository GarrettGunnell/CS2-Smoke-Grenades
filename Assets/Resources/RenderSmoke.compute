#pragma kernel CS_GenerateNoise
#pragma kernel CS_DebugNoise
#pragma kernel CS_RayMarchSmoke

#define STEPS 256
#define MIN_HIT_DISTANCE 0.001
#define MAX_DISTANCE 200
#define PI 3.1415926538

RWStructuredBuffer<int> _SmokeVoxels;
float3 _BoundsExtent;
float3 _VoxelResolution;

struct BulletHole {
    float3 origin;
    float3 forward;
    float2 radius;
};

RWStructuredBuffer<BulletHole> _BulletHoles;
int _BulletHoleCount;

RWTexture3D<half> _RWNoiseTex;
Texture3D<half> _NoiseTex;
SamplerState point_repeat_sampler;
SamplerState linear_repeat_sampler;
SamplerState linear_clamp_sampler;

RWTexture2D<float4> _SmokeTex;
RWTexture2D<float> _SmokeDepthTex;
RWTexture2D<half> _SmokeMaskTex;

Texture2D<half> _DepthTex;

float3 _CameraWorldPos;
float3 _LightColor;
float3 _SunDirection;
float4x4 _CameraToWorld;
float4x4 _CameraInvProjection;
float4x4 _CameraInvViewProjection;
int _BufferWidth, _BufferHeight;
float _FrameTime;

float3 _Radius;
float4 _CubeParams;
float3 _SmokeOrigin;
float3 _BulletForward;
float3 _BulletOrigin;
float _R1, _R2, _BulletDepth;

int _StepCount;
int _LightStepCount;
float _SmokeSize;
float _VolumeDensity, _ShadowDensity;
float _AbsorptionCoefficient, _ScatteringCoefficient;
float3 _SmokeColor, _ExtinctionColor;
float _G;
float _DensityFalloff;
int _PhaseFunction;
float _AlphaThreshold;

float3 _AnimationDirection;

float3 _NoiseRes;
int _Octaves;
float _Amplitude, _Warp, _Add;
int _CellSize, _AxisCellCount, _InvertNoise, _Seed;

float hash(uint n) {
    // integer hash copied from Hugo Elias
	n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float worley(float3 coord, int axisCellCount) {
    int3 cell = floor(coord / _CellSize);

    float3 localSamplePos = float3(coord / _CellSize - cell);

    float dist = 1.0f;

    for (int x = -1; x <= 1; ++x) {
        for (int y = -1; y <= 1; ++y) {
            for (int z = -1; z <= 1; ++z) {
                int3 cellCoordinate = cell + int3(x, y, z);
                int x = cellCoordinate.x;
                int y = cellCoordinate.y;
                int z = cellCoordinate.z;

                if (x == -1 || x == axisCellCount || y == -1 || y == axisCellCount || z == -1 || z == axisCellCount) {
                    int3 wrappedCellCoordinate = fmod(cellCoordinate + axisCellCount, (int3)axisCellCount);
                    int wrappedCellIndex = wrappedCellCoordinate.x + axisCellCount * (wrappedCellCoordinate.y + wrappedCellCoordinate.z * axisCellCount);
                    float3 featurePointOffset = cellCoordinate + float3(hash(_Seed + wrappedCellIndex), hash(_Seed + wrappedCellIndex * 2), hash(_Seed + wrappedCellIndex * 3));
                    dist = min(dist, distance(cell + localSamplePos, featurePointOffset));
                } else {
                    int cellIndex = cellCoordinate.x + axisCellCount * (cellCoordinate.y + cellCoordinate.z * axisCellCount);
                    float3 featurePointOffset = cellCoordinate + float3(hash(_Seed + cellIndex), hash(_Seed + cellIndex * 2), hash(_Seed + cellIndex * 3));
                    dist = min(dist, distance(cell + localSamplePos, featurePointOffset));
                }
            }
        }
    }

    dist = sqrt(1.0f - dist * dist);
    dist *= dist * dist * dist * dist * dist;
    return dist * 0.75;
}

[numthreads(8,8,8)]
void CS_GenerateNoise(uint3 id : SV_DISPATCHTHREADID) {
    //Convert to UV
    float3 pos = float3(id.xyz);
    
    float n = 0.0f;

    float G = exp2(-1);
    float f = 1.0f;
    float a = 1.0f;

    for (int i = 0; i < _Octaves; ++i) {
        float noise = worley(pos.xyz * f + i * _Warp, _AxisCellCount * f) * a;
        n += noise;
        f *= 2.0f;
        a *= G;
    }

    n += _Add;
    n = saturate(n) * _Amplitude;
    
    _RWNoiseTex[id.xyz] = _InvertNoise ? _Amplitude - n : n;
}

uint _DebugNoiseSlice;
uint _DebugAxis;
uint _DebugTiledNoise;

float RaymarchNoisePlane(float3 rayOrigin, float3 rayDir) {
    float distance = 0.0f;

    float3 n = 0;
    if (_DebugAxis == 0) n.x = 1;
    if (_DebugAxis == 1) n.y = 1;
    if (_DebugAxis == 2) n.z = 1;

    for (int i = 0; i < STEPS && distance < MAX_DISTANCE; ++i) {
        float3 pos = rayOrigin + distance * rayDir;     
        float distanceToObject = max(dot(pos, -n), dot(pos, n));
        distance += distanceToObject;

        if (distanceToObject < MIN_HIT_DISTANCE) return distance;
    }

    return MAX_DISTANCE;
}

[numthreads(8,8,1)]
void CS_DebugNoise(uint3 id : SV_DISPATCHTHREADID) {
    float3 origin = _CameraWorldPos;

    float2 uv = (id.xy / float2(_BufferWidth, _BufferHeight)) * 2 - 1;
    float3 direction = mul(_CameraInvProjection, float4(uv, 1.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    float d = RaymarchNoisePlane(origin, direction);

    float4 col = 0.0f;
    if (d < MAX_DISTANCE) {
        float3 pos = origin + direction * d;

        if ((all(pos > 0) && all(pos < 1)) || _DebugTiledNoise) {
            if (_DebugAxis == 0) pos.x = (_DebugNoiseSlice - 1) / _NoiseRes.x;
            if (_DebugAxis == 1) pos.y = (_DebugNoiseSlice - 1) / _NoiseRes.y;
            if (_DebugAxis == 2) pos.z = (_DebugNoiseSlice - 1) / _NoiseRes.z;

            col.rgb = _NoiseTex.SampleLevel(linear_repeat_sampler, pos, 0).r;
        }
    }

    _SmokeTex[id.xy] = col;
}

float3 ComputeWorldSpacePosition(float2 positionNDC, float deviceDepth) {
    float4 positionCS = float4(positionNDC * 2.0 - 1.0, deviceDepth, 1.0);
    float4 hpositionWS = mul(_CameraInvViewProjection, positionCS);
    return hpositionWS.xyz / hpositionWS.w;
}

float HenyeyGreenstein(float g, float cos_theta) {
    float denom = 1.0f + g * g - 2.0f * g * cos_theta;
    return (1.0f / (4.0f * PI)) * ((1.0f - g * g) / (denom * sqrt(denom)));
}

float Mie(float g, float cos_theta) {
    float denom = 1.0f + g * g - 2.0f * g * cos_theta;
    return (3.0f / (8.0f * PI)) * (((1 - g * g) * (1 + cos_theta * cos_theta)) / ((2.0f + g * g) * (denom * sqrt(denom)))); 
}

float Rayleigh(float cos_theta) {
    return (3.0f / (16.0f * PI)) * (1 + cos_theta * cos_theta);
}

float phase(float g, float cos_theta) {
    float p = 0.0f;

    if (_PhaseFunction == 0) p = HenyeyGreenstein(g, cos_theta);
    if (_PhaseFunction == 1) p = Mie(g, cos_theta);
    if (_PhaseFunction == 2) p = Rayleigh(cos_theta);

    return p;
}

uint to1D(uint3 pos) {
    return pos.x + pos.y * _VoxelResolution.x + pos.z * _VoxelResolution.x * _VoxelResolution.y;
}

int getVoxel(float3 pos) {
    int v = 0;
    pos.y -= _BoundsExtent.y;

    if (abs(dot(pos, float3(1, 0, 0))) <= _BoundsExtent.x &&
        abs(dot(pos, float3(0, 1, 0))) <= _BoundsExtent.y &&
        abs(dot(pos, float3(0, 0, 1))) <= _BoundsExtent.z)
    {
        pos.y += _BoundsExtent.y;
        float3 seedPos = pos;
        seedPos.xz += _BoundsExtent.xz;
        seedPos /= _BoundsExtent * 2;
        seedPos *= _VoxelResolution;

        v = _SmokeVoxels[to1D(seedPos)];
    }

    return v;
}

float getTrilinearVoxel(float3 pos) {
    float v = 0;
    pos.y -= _BoundsExtent.y;

    if (abs(dot(pos, float3(1, 0, 0))) <= _BoundsExtent.x &&
        abs(dot(pos, float3(0, 1, 0))) <= _BoundsExtent.y &&
        abs(dot(pos, float3(0, 0, 1))) <= _BoundsExtent.z)
    {
        pos.y += _BoundsExtent.y;
        float3 seedPos = pos;
        seedPos.xz += _BoundsExtent.xz;
        seedPos /= _BoundsExtent * 2;
        seedPos *= _VoxelResolution;
        seedPos -= 0.5f;

        uint3 vi = floor(seedPos);

        float weight1 = 0.0f;
        float weight2 = 0.0f;
        float weight3 = 0.0f;
        float value = 0.0f;

        for (int i = 0; i < 2; ++i) {
            weight1 = 1 - min(abs(seedPos.x - (vi.x + i)), _VoxelResolution.x);
            for (int j = 0; j < 2; ++j) {
                weight2 = 1 - min(abs(seedPos.y - (vi.y + j)), _VoxelResolution.y);
                for (int k = 0; k < 2; ++k) {
                    weight3 = 1 - min(abs(seedPos.z - (vi.z + k)), _VoxelResolution.z);
                    value += weight1 * weight2 * weight3 * (float)_SmokeVoxels[to1D(vi + uint3(i, j, k))];
                }
            }
        }

        v = value;
    }

    return v;
}

float bulletHole(float3 pos, float n) {
    float3 p = pos;
    float minDist = 1.0f;
    for (int i = 0; i < _BulletHoleCount; ++i) {
        BulletHole bulletHole = _BulletHoles[i];

        float3 a = bulletHole.origin;
        float3 b = a + _BulletDepth * bulletHole.forward;

        float r1 = bulletHole.radius.x;
        float r2 = bulletHole.radius.y;

        float3 ba = b - a;
        float l2 = dot(ba, ba);
        float rr = r1 - r2;
        float a2 = l2 - rr * rr;
        float il2 = 1.0f / l2;
            
        float3 pa = p - a;
        float y = dot(pa, ba);
        float z = y - l2;
        float3 temp = pa * l2 - ba * y;
        float x2 = dot(temp, temp);
        float y2 = y * y * l2;
        float z2 = z * z * l2;

        float k = sign(rr) * rr * rr * x2;
        float distance = 0.0f;
        if (sign(z) * a2 * z2 > k) distance = sqrt(x2 + z2) * il2 - r2;
        else if (sign(y) * a2 * y2 < k) distance = sqrt(x2 + y2) * il2 - r1;
        else distance = (sqrt(x2 * a2 * il2) + y * rr) * il2 - r1;

        float dist = min(1.0f, distance + n);
        dist = smoothstep(0.75, 1.0f, dist);

        minDist = min(minDist, dist);
    }

    return minDist;
}

float getDensity(float3 pos) {
    float v = 0;
    float n = 0.0f;
    float falloff = 0.0f;
    float heightMod = 0.0f;

    float3 uvw = pos / _SmokeSize;
    uvw += _AnimationDirection * _FrameTime;
    float3 vp = pos - _SmokeOrigin;
    float3 radius = _Radius;

    v = getTrilinearVoxel(pos);

    n = _NoiseTex.SampleLevel(linear_repeat_sampler, uvw, 0).r;

    float dist = min(1.0f, length(vp / radius));
    float voxelDist = min(1.0f, 1 - (v / 16.0f));
    dist = max(dist, voxelDist);

    dist = smoothstep(_DensityFalloff, 1.0f, dist);

    falloff = min(1.0f, dist + n);

    return saturate(saturate(v) * (1 - falloff) * bulletHole(pos, n));
}

[numthreads(8,8,1)]
void CS_RayMarchSmoke (uint3 id : SV_DispatchThreadID) {
    float2 uv = (id.xy / float2(_BufferWidth, _BufferHeight));
    float sceneDepth = _DepthTex.SampleLevel(linear_clamp_sampler, uv, 0).r;

    float3 sceneWorldPos = ComputeWorldSpacePosition(uv, sceneDepth);

    // Create camera ray
    float3 origin = _CameraWorldPos;
    float3 rayDir = mul(_CameraInvProjection, float4(uv * 2 - 1, 0.0f, 1.0f)).xyz;
    rayDir = mul(_CameraToWorld, float4(rayDir, 0.0f)).xyz;
    rayDir = normalize(rayDir);

    float3 col = 0.0f;
    float alpha = 1.0f;

    float distanceTraveled = 0;
    float3 samplePos = origin + distanceTraveled * rayDir;
    float v = getVoxel(samplePos);

    // Solve for t in P = O + tD for scene depth
    float sceneIntersectDistance = -((origin - sceneWorldPos) / rayDir).x;
    
    while (v == 0 && distanceTraveled < MAX_DISTANCE) {
        distanceTraveled += 0.4;
        samplePos = origin + distanceTraveled * rayDir;
        v = getVoxel(samplePos);
    }

    if (v) {
        // go one step back to avoid missing details
        distanceTraveled -= 0.4f;
        float thickness = 0.0f;

        col = _SmokeColor;
        float extinctionCoefficient = _AbsorptionCoefficient + _ScatteringCoefficient;

        float cos_theta = dot(rayDir, -_SunDirection);
        float p = phase(_G, cos_theta);

        float stepSize = 0.05f;
        float lStepSize = 0.25f;
        float accumDensity = 0.0f;

        int stepCount = 0;
        // Main volumetric lighting pass
        float sceneIntersectDistance = -((origin - sceneWorldPos) / rayDir).x;
        while ((stepCount < _StepCount) && distanceTraveled < sceneIntersectDistance) {
            samplePos = origin + distanceTraveled * rayDir;
            v = getDensity(samplePos);
            float sampleDensity = v;
            accumDensity += sampleDensity * _VolumeDensity;

            ++stepCount;
            distanceTraveled += stepSize;
            thickness += stepSize * sampleDensity;
            alpha = exp(-thickness * accumDensity * extinctionCoefficient);
            if (v > 0.001f) {
                float tau = 0.0f;
                float3 lightPos = samplePos;
                int lStepCount = 0;
                while (lStepCount < _LightStepCount) {
                    tau += v * lStepSize;
                    lightPos -= lStepSize * _SunDirection;
                    v = getDensity(lightPos);
                    lStepCount++;
                }

                float3 lightAttenuation = exp(-(tau / _ExtinctionColor) * extinctionCoefficient * _ShadowDensity);
                col += _LightColor * lightAttenuation * alpha * p * _ScatteringCoefficient * _VolumeDensity * sampleDensity;
            }

            if (alpha < _AlphaThreshold) break;
        }

        // Halfway sample in the case of overshooting scene depth
        if (distanceTraveled > sceneIntersectDistance) {
            samplePos -= (distanceTraveled - sceneIntersectDistance) * rayDir;
            thickness -= distanceTraveled - sceneIntersectDistance;
            
            v = getDensity(samplePos);
            float sampleDensity = v;
            accumDensity += _VolumeDensity * sampleDensity;
            if (v > 0.001f) {
                float tau = 0.0f;
                float3 lightPos = samplePos;
                alpha = exp(-thickness * accumDensity * extinctionCoefficient);
                int lStepCount = 0;
                while (lStepCount < _LightStepCount) {
                    tau += v * lStepSize;
                    lightPos -= lStepSize * _SunDirection;
                    v = getDensity(lightPos);
                    lStepCount++;
                }

                float3 lightAttenuation = exp(-(tau / _ExtinctionColor) * extinctionCoefficient * _ShadowDensity);
                col += _LightColor * lightAttenuation * alpha * p * _ScatteringCoefficient * _VolumeDensity * sampleDensity;
            }
        }

        if (alpha < _AlphaThreshold) alpha = 0;
    }

    _SmokeTex[id.xy] = float4(saturate(col), 1.0f);
    _SmokeMaskTex[id.xy] = saturate(alpha);
}